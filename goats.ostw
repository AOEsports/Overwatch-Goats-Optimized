globalvar define health_set;
playervar define base_health;
playervar define base_armor;
playervar define base_shield;

rule: "Hud Text"
Event.OngoingGlobal
{
    CreateHudText(AllPlayers(),"{0}\n{1}\n{2}".Format([ServerLoad(),ServerLoadAverage(),ServerLoadPeak()]),null,null,Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleAlways);
}
rule: "Spawn in"
Event.OngoingPlayer
if(HasSpawned())
{
    if(HeroOf(EventPlayer()) == Hero.Reinhardt)
    {
        rein_setup();
    }
}
void rein_setup()
{
    //shield health 2000
    //shield regen 200 up from 144
    SetMaxHealth(EventPlayer(),(2000/1400)*100);

    //armor 200
    //health 300
    base_armor = 200;
    base_health = 300;

    //hammer damage 75

    //fire strike 1
    //fire strike damage 100
    
    //charge 300 damage
    //cooldown 10

    //earthshatter 50 damage flat

    //no tank passive
}

rule: "Rein Action"
Event.OngoingPlayer
Player.Reinhardt
{

    //health check
    if(IsInSpawnRoom() && !IsGameInProgress())
    {
        if(MaxHealth() != base_health + base_armor + base_shield && health_set == false)
        {
            health_set = true;
            apply_custom_health();
            health_set = false;
        }
    }
    if(IsFiringPrimary())
    {
        //change hammer damage
        //100->75
        SetDamageDealt(EventPlayer(),(75/100)*100);
    }
    else if (IsUsingAbility2())
    {
        //fire strike
        SetDamageDealt(EventPlayer(),(100/120)*100);
        SetAbilityCharge(EventPlayer(),Button.Ability2,0);
        WaitUntil(IsUsingAbility2() == false,10);
        SetAbilityCooldown(EventPlayer(),Button.Ability2,10);
    }
    else if (IsUsingAbility1())
    {
        //charge
        SetDamageDealt(EventPlayer(),(300/275)*100);
        WaitUntil(IsUsingAbility1() == false,10);
        SetAbilityCooldown(EventPlayer(),Button.Ability1,10);
    }
    else if(IsFiringSecondary())
    {
        //shield
    }
    else if (IsUsingUltimate())
    {
        //earth shatter
    }

    MinWait();
    LoopIfConditionIsTrue();
}

void apply_custom_health() "apply custom health"
{
    if (EventPlayer().IsInSpawnRoom())
    {
        define temp_position = PositionOf(EventPlayer());
        MinWait();
        Teleport(EventPlayer(),ObjectivePosition(0));
        WaitUntil(EventPlayer().IsInSpawnRoom() == false,10);
        SetStatus(EventPlayer(),null,Status.Unkillable,10);
        Damage(EventPlayer(),null,9999999);
        MinWait();

        AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,9999999,true,true);
        AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,9999999,true,true);
        AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields,9999999,true,true);

        MinWait();
        RemoveAllHealthPoolsFromPlayer(EventPlayer());
        MinWait();

        if (base_health > 0)
        {
            AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,base_health-1,true,true);
        }

        if (base_armor > 0)
        {
            AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,base_armor,true,true);
        }

        if (base_shield > 0)
        {
            AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields,base_shield,true,true);
        }

        MinWait();

        Teleport(EventPlayer(),temp_position);
    }
}