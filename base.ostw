globalvar define health_set;
playervar define role;
playervar define base_health;
playervar define base_armor;
playervar define base_shield;
playervar define self_move_speed;
playervar define boop;
playervar define hud_ref;
playervar define current_hero;
playervar define tick_rate;



import "ana.ostw";
import "brig.ostw";
import "dva.ostw";
import "lucio.ostw";
import "moira.ostw";
import "rein.ostw";
import "winston.ostw";
import "zarya.ostw";
import "zen.ostw";
rule: "Hud Text"
Event.OngoingGlobal
{
    DisableInspectorRecording();
    CreateHudText(AllPlayers(),null,null,"Server Load: {0}\nAverage: {1}\nPeak: {2}".Format([ServerLoad(),ServerLoadAverage(),ServerLoadPeak()]),Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleAlways);
}

rule: "Spawn in"
Event.OngoingPlayer
if(HeroOf(EventPlayer()) != current_hero)
{
    base_armor = 0;
    base_health = 0;
    base_shield = 0;
    self_move_speed = 100;
    tick_rate = 1/62.5;
    SetKnockbackReceived(EventPlayer(),100);
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    //CreateHudText(EventPlayer(),"{0}\n{1}\n{2}".Format([ServerLoad(),ServerLoadAverage(),ServerLoadPeak()]),null,null,Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleNever);
    if(HeroOf(EventPlayer()) == Hero.Ana)
    {
        ana_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Brigitte)
    {
        brig_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Dva)
    {
        dva_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Lucio)
    {
        lucio_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Moira)
    {
        moira_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Reinhardt)
    {
        rein_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Winston)
    {
        winston_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Zarya)
    {
        zarya_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Zenyatta)
    {
        zen_setup();
    }
}

rule: "Damage on occassion"
Event.OngoingPlayer
if(Health() < MaxHealth()-1)
{
    Damage(EventPlayer(),null,0.01);
    Heal(EventPlayer(),null,0.01);
    Wait(2.4);
    Loop();
}

void apply_custom_health() "apply custom health"
{
    if(EventPlayer().IsInSpawnRoom())
    {
        define temp_pos = EyePosition()+FacingDirectionOf()*1;
        define temp_face = FacingDirectionOf();
        define temp_position = PositionOf(EventPlayer());
        StartCamera(EventPlayer(),temp_pos,temp_face,0);
        SetInvisible(EventPlayer(),InvisibleTo.All);
        RemoveAllHealthPoolsFromPlayer(EventPlayer());
        MinWait();
        MinWait();

        Teleport(EventPlayer(),ObjectivePosition(0)+Vector(0,20,0));
        WaitUntil(EventPlayer().IsInSpawnRoom() == false,10);

        SetStatus(EventPlayer(),null,Status.Unkillable,10);
        Damage(EventPlayer(),null,9999999);
        MinWait();

        AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,9999999,true,true);
        AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,9999999,true,true);
        AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields,9999999,true,true);

        MinWait();
        RemoveAllHealthPoolsFromPlayer(EventPlayer());
        MinWait();

        if (base_health > 0)
        {
            AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,base_health-1,true,true);
        }

        if (base_armor > 0)
        {
            AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,base_armor,true,true);
        }

        if (base_shield > 0)
        {
            AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields,base_shield,true,true);
        }

        MinWait();

        Teleport(EventPlayer(),temp_position);
        WaitUntil(IsInSpawnRoom(),10);
        SetFacing(EventPlayer(),temp_face);
        MinWait();
        MinWait();
        StopCamera(EventPlayer());
        ClearStatus(EventPlayer(),Status.Unkillable);
        SetInvisible(EventPlayer(),InvisibleTo.None);
    }
    else
    {
        RemoveAllHealthPoolsFromPlayer(EventPlayer());
        MinWait();
        MinWait();

        SetStatus(EventPlayer(),null,Status.Unkillable,1);
        Damage(EventPlayer(),null,9999999);
        MinWait();

        AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,9999999,true,true);
        AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,9999999,true,true);
        AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields,9999999,true,true);

        MinWait();
        RemoveAllHealthPoolsFromPlayer(EventPlayer());
        MinWait();

        if (base_health > 0)
        {
            AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,base_health-1,true,true);
        }

        if (base_armor > 0)
        {
            AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,base_armor,true,true);
        }

        if (base_shield > 0)
        {
            AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields,base_shield,true,true);
        }
        ClearStatus(EventPlayer(),Status.Unkillable);
        MinWait();
    }

}
