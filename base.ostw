globalvar define health_set;
playervar define role;
playervar define base_health;
playervar define base_armor;
playervar define base_shield;
playervar define self_move_speed;
playervar define boop;
playervar define hud_ref;
playervar define current_hero;
playervar define tick_rate;
playervar define setup_complete;
playervar define debug_text;
playervar define is_alive;
globalvar define debug_mode;
playervar define armor_tracking;
playervar define current_shield_health;
playervar define max_shield_health;
playervar define time_since_damage_shield;
globalvar define average_value;
globalvar define average_count;
playervar define health_ref;
globalvar define tick_time = 1/62.5;

import "ana.ostw";
import "brig.ostw";
import "dva.ostw";
import "lucio.ostw";
import "moira.ostw";
import "rein.ostw";
import "winston.ostw";
import "zarya.ostw";
import "zen.ostw";

rule: "Hud Text"
Event.OngoingGlobal
{
    debug_mode = false;
    EnableInspectorRecording();
}

rule: "Slow Mode"
Event.OngoingGlobal
if(ServerLoadAverage() >= 254)
{
    SetSlowMotion(25);
    WaitUntil(ServerLoadAverage() < 250,5);
    SetSlowMotion(100);
}

rule: "Spawn in"
Event.OngoingPlayer
if (setup_complete == false || (IsAlive() && is_alive == false) || current_hero != HeroOf(EventPlayer()))
{
    setupPlayer();
    is_alive = true;
}

rule: "Track Dead"
Event.OngoingPlayer
if(is_alive == true && IsDead())
{
    is_alive = false;
}

void setupPlayer() "setup_player" {
    setup_complete = false;
    SetAbility1Enabled(EventPlayer(),true);
    SetAbility2Enabled(EventPlayer(),true);
    SetJumpVerticalSpeed(EventPlayer(),100);
    base_armor = 0;
    base_health = 0;
    base_shield = 0;
    self_move_speed = 100;
    role = 0;
    tick_rate = 1/62.5;
    DestroyHudText(zarya_hud_ref);
    SetKnockbackReceived(EventPlayer(), 80);
    RemoveAllHealthPoolsFromPlayer();
    //remove health pools
    DestroyHudText(debug_text);
    //CreateHudText(EventPlayer(),"{0}\n{1}\n{2}".Format([ServerLoad(),ServerLoadAverage(),ServerLoadPeak()]),null,null,Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleNever);
    if(HeroOf(EventPlayer()) == Hero.Ana)
    {
        ana_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Brigitte)
    {
        brig_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Dva)
    {
        dva_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Lucio)
    {
        lucio_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Moira)
    {
        moira_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Reinhardt)
    {
        rein_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Winston)
    {
        winston_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Zarya)
    {
        zarya_setup();
    }
    else if(HeroOf(EventPlayer()) == Hero.Zenyatta)
    {
        zen_setup();
    }
    current_hero = HeroOf(EventPlayer());
    setup_complete = true;
    armor_tracking = HealthOfType(EventPlayer(),HealthType.Armor);
}


rule: "In Assembling Heroes"
Event.OngoingPlayer
if(IsAssemblingHeroes())
if (current_hero != null)
{
    MinWait();
    current_hero = null;
    setup_complete = false;
}

rule: "Inbetween rounds"
Event.OngoingPlayer
if(!IsGameInProgress())
if(IsBetweenRounds())
{
    Respawn(AllDeadPlayers());
    Wait(10);
    WaitUntil(IsInSpawnRoom(EventPlayer()),100);
    RemoveAllHealthPoolsFromPlayer();
    MinWait();
    SetMaxHealth(EventPlayer(),100.1);
    MinWait();
    SetMaxHealth(EventPlayer(),100);
    Heal(EventPlayer(),null,999999);
    setup_complete = false;
    AllPlayers().current_hero = null;
    current_hero = null;
}

rule: "Damage on occassion"
Event.OngoingPlayer
if(Health() < MaxHealth())
{
    Damage(EventPlayer(),null,0.01);
    Heal(EventPlayer(),null,0.01);
    Wait(2.4);
    LoopIfConditionIsTrue();
}

rule: "Armor Tracking and tank headshot"
Event.OnDamageTaken
if(role == 1)
{
    if(EventWasCriticalHit())
    {
        if(armor_tracking > 0) {
            Damage(Victim(),Attacker(),((EventDamage()+10)*0.25)-10);
        } else {
            Damage(Victim(),Attacker(),EventDamage()*0.25);
        }
    }
}

void apply_custom_health() "apply custom health"
{   
    SetHealingReceived(EventPlayer(),0);
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    MinWait();
    SetStatus(EventPlayer(),null,Status.Unkillable,5);
    MinWait();
    Damage(EventPlayer(),null,9999999);
    SetPlayerHealth(EventPlayer(),1);
    MinWait();

    AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,9999999,true,true);
    AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,9999999,true,true);
    AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields,9999999,true,true);

    MinWait();
    RemoveAllHealthPoolsFromPlayer(EventPlayer());
    MinWait();
    SetHealingReceived(EventPlayer(),100);
    Heal(EventPlayer(),null,10000);
    MinWait();

    if (base_health > 0) {
        health_ref = AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,base_health-1,true,true);
    }

    if (base_armor > 0) {
        AddHealthPoolToPlayer(EventPlayer(),HealthType.Armor,base_armor,true,true);
    }

    if (base_shield > 0) {
        AddHealthPoolToPlayer(EventPlayer(),HealthType.Shields,base_shield,true,true);
    }
    ClearStatus(EventPlayer(),Status.Unkillable);
    MinWait();
}

rule: "Average of Average Tracking"
Event.OngoingGlobal
{
    if(ServerLoadAverage() > 50) {
        average_value *= average_count;
        average_value += ServerLoadAverage();
        average_count++;
        average_value /= average_count;
    }

    Wait(1);
    Loop();
}